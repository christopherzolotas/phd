[comment encoding = UTF-8 /]
[module observableDeleteResourceHandlerNoParents('platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AnnotationLayerStack.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/DesignPatternsLayerPSMMetamodel.ecore','platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AuthenticationPSMMetamodel.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/PSMMetamodel.ecore')]


[template public observableDeleteResourceHandlerNoParents(anAnnotationStack : AnnotationStack, httpVerb : HTTPVerb, jRC : JavaResourceController)]
[file (anAnnotationStack.hasCorePSM.name + '/src/main/java/eu/fp7/scase/' + anAnnotationStack.hasCorePSM.name.toLowerCase() + '/' + jRC.parentName + '/' + 'ObservableDelete'  + jRC.parentName + 'Handler.java', false, 'UTF-8')]
/*
 * ARISTOSTLE UNIVERSITY OF THESSALONIKI
 * Copyright (C) 2015
 * Aristotle University of Thessaloniki
 * Department of Electrical & Computer Engineering
 * Division of Electronics & Computer Engineering
 * Intelligent Systems & Software Engineering Lab
 *
 * Project             : [anAnnotationStack.hasCorePSM.name/]
 * WorkFile            : 
 * Compiler            : 
 * File Description    : 
 * Document Description: 
* Related Documents	   : 
* Note				   : 
* Programmer		   : RESTful MDE Engine created by Christoforos Zolotas
* Contact			   : christopherzolotas@issel.ee.auth.gr
*/


package eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].[jRC.parentName/];


import javax.ws.rs.core.UriInfo;
[if (anAnnotationStack.bHasAuthenticationAnnotation)]
[if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import com.sun.jersey.core.util.Base64;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName/].[anAnnotationStack.getAuthenticationPerformer().authenticationModelName/];
[/if]
[/if]
[comment The Observer Code from here ../]
[if (anAnnotationStack.hasObserverPattern())]
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
[/if]
[comment ..to here/]

import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.HypermediaLink;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.HibernateController;


/* This class processes DELETE requests for [jRC.parentName/] resources and creates the hypermedia to be returned to the client*/
public class ObservableDelete[jRC.parentName/]Handler{

    private HibernateController oHibernateController;
    private UriInfo oApplicationUri; //Standard datatype that holds information on the URI info of this request
	private String strResourcePath; //relative path to the current resource
    private [jRC.hasAssociatedJavaRModel.name/] o[jRC.hasAssociatedJavaRModel.name/];
	[if (anAnnotationStack.bHasAuthenticationAnnotation)]
	[if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]
	private String authHeader;
	private [anAnnotationStack.getAuthenticationPerformer().authenticationModelName/] oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/];
	[/if]
	[/if]

	//Observers List
    private ArrayList<Java[jRC.parentName/]Observer> Observers = new ArrayList<Java[jRC.parentName/]Observer>();

    public ObservableDelete[jRC.parentName/]Handler([if (anAnnotationStack.bHasAuthenticationAnnotation)][if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]String authHeader, [/if][/if]int [jRC.parentName/]Id, UriInfo oApplicationUri){
        o[jRC.hasAssociatedJavaRModel.name/] = new [jRC.hasAssociatedJavaRModel.name/]();
        o[jRC.hasAssociatedJavaRModel.name/].set[jRC.parentName/]Id([jRC.parentName/]Id);
        this.oHibernateController = HibernateController.getHibernateControllerHandle();
        this.oApplicationUri = oApplicationUri;
		this.strResourcePath = calculateProperResourcePath();
		[if (anAnnotationStack.bHasAuthenticationAnnotation)]
		[if (anAnnotationStack.hasGuestMode( jRC.parentName) = false)]
		this.authHeader = authHeader;
		this.oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/] = new [anAnnotationStack.getAuthenticationPerformer().authenticationModelName/](); 
		[/if] 
		[/if]
		try{
			this.Observers = oHibernateController.get[jRC.hasAssociatedJavaRModel.parentName/]Observers(Observers);
		}catch(Exception e){
			System.out.println("No Observers Found. Creating or updating table");
			
		}
    }

	public String calculateProperResourcePath(){
    	if(this.oApplicationUri.getPath().lastIndexOf('/') == this.oApplicationUri.getPath().length() - 1){
        	return this.oApplicationUri.getPath().substring(0, this.oApplicationUri.getPath().length() - 1);
    	}
    	else{
        	return this.oApplicationUri.getPath();
    	}
	}

	public int registerToVerb(String observerReaction){
		Java[jRC.parentName/]Observer oObserver;
		
		oObserver = new Java[jRC.parentName/]Observer();
		oObserver.setObserverHTTPAction("DELETE");
		oObserver.setType("VERB");
		oObserver.set[jRC.hasAssociatedJavaRModel.name/](this.o[jRC.hasAssociatedJavaRModel.name/]);
		oObserver.setAction(observerReaction);
		this.oHibernateController.createJava[jRC.parentName/]Observer(oObserver);

		return oObserver.getobserverId();
	}
	
	public int registerToInstance(String observerReaction){
		Java[jRC.parentName/]Observer oObserver;
		
		oObserver = new Java[jRC.parentName/]Observer();
		oObserver.setObserverHTTPAction("DELETE");
		oObserver.setType("INSTANCE");
		oObserver.set[jRC.hasAssociatedJavaRModel.name/](this.o[jRC.hasAssociatedJavaRModel.name/]);
		oObserver.setAction(observerReaction);
		this.oHibernateController.createJava[jRC.parentName/]Observer(oObserver);

		return oObserver.getobserverId();
	}
	
	public void unregister(String observerId){
		try{
			Java[jRC.parentName/]Observer oObserver;
			for(Java[jRC.parentName/]Observer observer : this.Observers){
				if(observer.getobserverId()==Integer.parseInt(observerId)){
					this.Observers.remove(this.Observers.indexOf(observer));
					this.oHibernateController.deleteJava[jRC.parentName/]Observer(observer);
					break;
				}
			}
		}catch(Exception e){
			System.out.println("Observer not found");
		}
	}
	

	public void notifyObservers(){
        for(Java[jRC.parentName/]Observer o: Observers){
			if(o.getType().equals("VERB")  && o.getObserverHTTPAction().equals("DELETE")){
				o.update("updating observer");
				this.oHibernateController.updateJava[jRC.parentName/]Observer(o);
			}else{
				/* System.out.println(this.o[jRC.hasAssociatedJavaRModel.name/].get[jRC.hasAssociatedJavaRModel.parentName/]Id());
				System.out.println(o.get[jRC.hasAssociatedJavaRModel.name/]().get[jRC.hasAssociatedJavaRModel.parentName/]Id()); */
				if(o.get[jRC.hasAssociatedJavaRModel.name/]().get[jRC.hasAssociatedJavaRModel.parentName/]Id() == this.o[jRC.hasAssociatedJavaRModel.name/].get[jRC.hasAssociatedJavaRModel.parentName/]Id()  && o.getObserverHTTPAction().equals("DELETE")){
					o.update("This is a cool instance message");
					this.oHibernateController.updateJava[jRC.parentName/]Observer(o);
				}
			}
        }
    
	}

    public [jRC.hasAssociatedJavaRModel.name/] delete[jRC.hasAssociatedJavaRModel.name/](){
		
		notifyObservers();
		[if (anAnnotationStack.bHasAuthenticationAnnotation)]
		[if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]
    	//check if there is a non null authentication header
    	if(authHeader == null){
    		throw new WebApplicationException(Response.Status.FORBIDDEN);
    	}
		[if (anAnnotationStack.hasBothModeAuthentication(jRC.parentName))]
		else if(authHeader.equalsIgnoreCase("guest")){ //if guest and authentication mode are allowed, check if the request originates from a guest user
			return createHypermedia(oHibernateController.delete[jRC.parentName/](o[jRC.hasAssociatedJavaRModel.name/]));
		}
		[/if]
		else{
	    	//decode the auth header
    		decodeAuthorizationHeader();

        	//authenticate the user against the database
        	oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/] = oHibernateController.authenticateUser(oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/]);

			//check if the authentication failed
			if(oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/] == null){
        		throw new WebApplicationException(Response.Status.UNAUTHORIZED);
        	}
		}
		[/if] 
		[/if]

        return createHypermedia(oHibernateController.delete[jRC.parentName/](o[jRC.hasAssociatedJavaRModel.name/]));
    }

	[if (anAnnotationStack.bHasAuthenticationAnnotation)]
	[if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]
	/* This function performs the decoding of the authentication header */
    public void decodeAuthorizationHeader()
    {
    	//check if this request has basic authentication
    	if( !authHeader.contains("Basic "))
    	{
    		throw new WebApplicationException(Response.Status.BAD_REQUEST);
    	}
    	
        authHeader = authHeader.substring("Basic ".length());
        String['['/][']'/] decodedHeader;
        decodedHeader = Base64.base64Decode(authHeader).split(":");
        
        if( decodedHeader == null)
        {
        	throw new WebApplicationException(Response.Status.BAD_REQUEST);
        }
        
        oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/].set[anAnnotationStack.getUsernameToken().name/](decodedHeader['['/]0[']'/]);
        oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/].set[anAnnotationStack.getPasswordToken().name/](decodedHeader['['/]1[']'/]);
    }
	[/if]
	[/if]

    /* This function produces hypermedia links to be sent to the client so as it will be able to forward the application state in a valid way.*/
    public [jRC.hasAssociatedJavaRModel.name/] createHypermedia([jRC.hasAssociatedJavaRModel.name/] o[jRC.hasAssociatedJavaRModel.name/]){

    /* Since both this resource and the related of it are deleted, there are created hypermedia links only towards the resources of which this one is related.*/
    	int iLastSlashIndex = String.format("%s%s", oApplicationUri.getBaseUri(), this.strResourcePath).lastIndexOf("/");
    	o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Create a new [jRC.parentName/]", "POST", "Parent"));
    	o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Get all [jRC.parentName/]", "GET", "Parent"));
    	return o[jRC.hasAssociatedJavaRModel.name/];
	}
}
[/file]
[/template]

[query private hasBothModeAuthentication(anAnnotationStack : AnnotationStack, resourceName : String) : Boolean =
	getAuthenticationLayerBothModeAnnotations(anAnnotationStack)->exists(bothModeAnnotation | bothModeAnnotation.HTTPActivityHandlerHasAuthenticationMode->exists(annHTTPActivityHandler | annHTTPActivityHandler.annotatesHTTPActivityHandler.name = 'Delete' + resourceName + 'Handler'))
/]

[query private getAuthenticationLayerBothModeAnnotations(anAnnotationStack : AnnotationStack) : Sequence(BothMode) =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select( annotation | annotation.oclIsTypeOf(BothMode))->asSequence()
/]

[query private hasAuthenticationOnlyMode(anAnnotationStack : AnnotationStack, resourceName : String) : Boolean =
	getAuthenticationLayerAuthenticationOnlyModeAnnotations(anAnnotationStack)->exists(authenticationOnlyMode | authenticationOnlyMode.HTTPActivityHandlerHasAuthenticationMode->exists(annHTTPActivityHandler | annHTTPActivityHandler.annotatesHTTPActivityHandler.name = 'Delete' + resourceName + 'Handler'))
/]

[query private getAuthenticationLayerAuthenticationOnlyModeAnnotations(anAnnotationStack : AnnotationStack) : Sequence(AuthenticationOnlyMode) =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select( annotation | annotation.oclIsTypeOf(AuthenticationOnlyMode))->asSequence()
/]

[query private hasGuestMode(anAnnotationStack : AnnotationStack, resourceName : String) : Boolean =
	getAuthenticationLayerGuestModeAnnotations(anAnnotationStack)->exists(guestMode | guestMode.HTTPActivityHandlerHasAuthenticationMode->exists(annHTTPActivityHandler | annHTTPActivityHandler.annotatesHTTPActivityHandler.name = 'Delete' + resourceName + 'Handler'))
/]

[query private getAuthenticationLayerGuestModeAnnotations(anAnnotationStack : AnnotationStack) : Sequence(GuestMode) =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select( annotation | annotation.oclIsTypeOf(GuestMode))->asSequence()
/]

[query private getAuthenticationPerformer(anAnnotationStack : AnnotationStack) : AuthenticationPerformer =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select(annotation | annotation.oclIsTypeOf(AuthenticationPerformer))->at(1)
/]

[query private getPasswordToken(anAnnotationStack : AnnotationStack) : Password =
	anAnnotationStack.getAuthenticationPerformer().hasAuthenticationToken->select(authenticationToken | authenticationToken.oclIsTypeOf(Password))->at(1)
/]

[query private getUsernameToken(anAnnotationStack : AnnotationStack) : AuthenticationToken =
	anAnnotationStack.getAuthenticationPerformer().hasAuthenticationToken->select(authenticationToken | authenticationToken.oclIsTypeOf(Password) = false)->at(1)
/]

[query private hasObserverPattern(anAnnotationStack : AnnotationStack) : Boolean =
	anAnnotationStack.hasDesignPatternsLayer.hasAnnotation -> exists(annotation | annotation.oclIsTypeOf(JavaObserverPattern))
/]

[query private getHTTPAvtivityHandlerObservers(oJavaObservableAnnHTTPActivityHandler : JavaObservableAnnHTTPActivityHandler) : Sequence(JavaObserver) =
	oJavaObservableAnnHTTPActivityHandler.isObservedBy -> asSequence()
/]

[query private getJavaObservableAnnHTTPActivityHandlerPost(oJavaObservableAnnHTTPActivityHandler : JavaObservableAnnHTTPActivityHandler) : Set(JavaObservableAnnHTTPActivityHandler) =
	oJavaObservableAnnHTTPActivityHandler.extendsAnnJavaHTTPActivityHandler -> select( a | a.annotatesHTTPActivityHandler.name.equalsIgnoreCase('POST'))
/]

[query private getJavaObservableAnnHTTPActivityHandler(anAnnotationStack : AnnotationStack) : Set(JavaObservableAnnHTTPActivityHandler) =
	anAnnotationStack.hasDesignPatternsLayer.hasAnnotation -> select (a | a.oclIsTypeOf(JavaObservableAnnHTTPActivityHandler))
/]
